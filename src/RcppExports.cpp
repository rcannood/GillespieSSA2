// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// make_ode_em
SEXP make_ode_em(double tau, double noise_strength);
RcppExport SEXP _GillespieSSA2_make_ode_em(SEXP tauSEXP, SEXP noise_strengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type noise_strength(noise_strengthSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ode_em(tau, noise_strength));
    return rcpp_result_gen;
END_RCPP
}
// make_ssa_btl
SEXP make_ssa_btl(double mean_firings);
RcppExport SEXP _GillespieSSA2_make_ssa_btl(SEXP mean_firingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean_firings(mean_firingsSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ssa_btl(mean_firings));
    return rcpp_result_gen;
END_RCPP
}
// make_ssa_etl
SEXP make_ssa_etl(double tau);
RcppExport SEXP _GillespieSSA2_make_ssa_etl(SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(make_ssa_etl(tau));
    return rcpp_result_gen;
END_RCPP
}
// make_ssa_exact
SEXP make_ssa_exact();
RcppExport SEXP _GillespieSSA2_make_ssa_exact() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(make_ssa_exact());
    return rcpp_result_gen;
END_RCPP
}
// test_ssa_method_cpp
List test_ssa_method_cpp(SEXP ssa_alg, NumericVector& state, NumericVector& propensity, IntegerVector& nu_i, IntegerVector& nu_p, IntegerVector& nu_x);
RcppExport SEXP _GillespieSSA2_test_ssa_method_cpp(SEXP ssa_algSEXP, SEXP stateSEXP, SEXP propensitySEXP, SEXP nu_iSEXP, SEXP nu_pSEXP, SEXP nu_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ssa_alg(ssa_algSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type state(stateSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type propensity(propensitySEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type nu_i(nu_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type nu_p(nu_pSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type nu_x(nu_xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ssa_method_cpp(ssa_alg, state, propensity, nu_i, nu_p, nu_x));
    return rcpp_result_gen;
END_RCPP
}
// test_propensity_cpp
List test_propensity_cpp(List propensity_funs, NumericVector& params, int buffer_size, int propensity_size, NumericVector& state, double sim_time);
RcppExport SEXP _GillespieSSA2_test_propensity_cpp(SEXP propensity_funsSEXP, SEXP paramsSEXP, SEXP buffer_sizeSEXP, SEXP propensity_sizeSEXP, SEXP stateSEXP, SEXP sim_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type propensity_funs(propensity_funsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type buffer_size(buffer_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type propensity_size(propensity_sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type state(stateSEXP);
    Rcpp::traits::input_parameter< double >::type sim_time(sim_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(test_propensity_cpp(propensity_funs, params, buffer_size, propensity_size, state, sim_time));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_gillespie();

static const R_CallMethodDef CallEntries[] = {
    {"_GillespieSSA2_make_ode_em", (DL_FUNC) &_GillespieSSA2_make_ode_em, 2},
    {"_GillespieSSA2_make_ssa_btl", (DL_FUNC) &_GillespieSSA2_make_ssa_btl, 1},
    {"_GillespieSSA2_make_ssa_etl", (DL_FUNC) &_GillespieSSA2_make_ssa_etl, 1},
    {"_GillespieSSA2_make_ssa_exact", (DL_FUNC) &_GillespieSSA2_make_ssa_exact, 0},
    {"_GillespieSSA2_test_ssa_method_cpp", (DL_FUNC) &_GillespieSSA2_test_ssa_method_cpp, 6},
    {"_GillespieSSA2_test_propensity_cpp", (DL_FUNC) &_GillespieSSA2_test_propensity_cpp, 6},
    {"_rcpp_module_boot_gillespie", (DL_FUNC) &_rcpp_module_boot_gillespie, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_GillespieSSA2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
