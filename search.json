[{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://rcannood.github.io/GillespieSSA2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robrecht Cannoodt. Author, maintainer. Wouter Saelens. Author.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Spearheading future omics analyses using dyngen, multi-modal simulator single cells. Robrecht Cannoodt, Wouter Saelens, Louise Deconinck, Yvan Saeys. Nat Commun 12, 3942 (2021); doi: https://doi.org/10.1038/s41467-021-24152-2.","code":"@Article{,   author = {Robrecht Cannoodt and Wouter Saelens and Louise Deconinck and Yvan Saeys},   title = {Spearheading future omics analyses using dyngen, a multi-modal simulator of single cells},   journal = {Nature Communications},   year = {2021},   doi = {10.1038/s41467-021-24152-2}, }"},{"path":"https://rcannood.github.io/GillespieSSA2/index.html","id":"gillespiessa2-gillespies-stochastic-simulation-algorithm-for-impatient-people","dir":"","previous_headings":"","what":"Gillespie's Stochastic Simulation Algorithm for Impatient People","title":"Gillespie's Stochastic Simulation Algorithm for Impatient People","text":"GillespieSSA2 fast, scalable, versatile framework simulating large systems Gillespie’s Stochastic Simulation Algorithm (SSA) (Cannoodt et al. 2021). package spiritual successor GillespieSSA package originally written Mario Pineda-Krch (Pineda-Krch 2008). GillespieSSA2 following added benefits: whole algorithm run Rcpp results major speed improvements (>100x). Even propensity functions (reactions) compiled Rcpp! Parameters variables renamed make easier understand. Many unit tests try ensure code works intended. SSA methods currently implemented : Exact (ssa_exact()), Explicit tau-leaping (ssa_etl()), Binomial tau-leaping (ssa_btl()).","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Gillespie's Stochastic Simulation Algorithm for Impatient People","text":"can install: latest released version CRAN latest development version github encounter bug, please file minimal reproducible example issues page.","code":"install.packages(\"GillespieSSA2\") devtools::install_github(\"rcannood/GillespieSSA2\", build_vignettes = TRUE)"},{"path":"https://rcannood.github.io/GillespieSSA2/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Gillespie's Stochastic Simulation Algorithm for Impatient People","text":"following example models available: Introduction GillespieSSA2:vignette(\"an_introduction\", package=\"GillespieSSA2\") Converting GillespieSSA GillespieSSA2:vignette(\"converting_from_GillespieSSA\", package=\"GillespieSSA2\") Decaying-Dimerization Reaction Set:vignette(\"decaying_dimer\", package=\"GillespieSSA2\") SIRS metapopulation model:vignette(\"epi_chain\", package=\"GillespieSSA2\") Linear Chain System:vignette(\"linear_chain\", package=\"GillespieSSA2\") Pearl-Verhulst Logistic Growth model:vignette(\"logistic_growth\", package=\"GillespieSSA2\") Lotka Predator-Prey model:vignette(\"lotka_predator_prey\", package=\"GillespieSSA2\") Radioactive Decay model:vignette(\"radioactive_decay\", package=\"GillespieSSA2\") Rosenzweig-MacArthur Predator-Prey model:vignette(\"rm_predator_prey\", package=\"GillespieSSA2\") Kermack-McKendrick SIR model:vignette(\"sir\", package=\"GillespieSSA2\")","code":""},{"path":[]},{"path":"https://rcannood.github.io/GillespieSSA2/reference/GillespieSSA2.html","id":null,"dir":"Reference","previous_headings":"","what":"GillespieSSA2: Gillespie's Stochastic Simulation Algorithm for impatient people. — GillespieSSA2","title":"GillespieSSA2: Gillespie's Stochastic Simulation Algorithm for impatient people. — GillespieSSA2","text":"GillespieSSA2 fast, scalable, versatile framework simulating large systems Gillespie's Stochastic Simulation Algorithm (SSA). package spiritual successor GillespieSSA package originally written Mario Pineda-Krch.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/GillespieSSA2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GillespieSSA2: Gillespie's Stochastic Simulation Algorithm for impatient people. — GillespieSSA2","text":"GillespieSSA2 following added benefits: whole algorithm run Rcpp results major speed improvements (>100x). Even propensity functions (reactions) compiled Rcpp! Parameters variables renamed make easier understand. Many unit tests try ensure code works intended. SSA methods currently implemented : Exact (ssa_exact()), Explicit tau-leaping (ssa_etl()), Binomial tau-leaping (ssa_btl()).","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/GillespieSSA2.html","id":"the-stochastic-simulation-algorithm","dir":"Reference","previous_headings":"","what":"The stochastic simulation algorithm","title":"GillespieSSA2: Gillespie's Stochastic Simulation Algorithm for impatient people. — GillespieSSA2","text":"stochastic simulation algorithm (SSA) procedure constructing simulated trajectories finite populations continuous time. \\(X_i(t)\\) number individuals population \\(\\) (\\(= 1,\\ldots,N\\)) time \\(t\\), SSA estimates state vector \\( \\mathbf{X}(t) \\equiv (X_1(t),\\ldots,X_N(t)) \\), given system initially (time \\(t_0\\)) state \\(\\mathbf{X}(t_0) = \\mathbf{x_0}\\). Reactions single instantaneous events changing least one populations (e.g. birth, death, movement, collision, predation, infection, etc). cause state system change time. SSA procedure samples time \\(\\tau\\) next reaction \\(R_j\\) (\\(j = 1,\\ldots,M\\)) updates system state \\(\\mathbf{X}(t)\\) accordingly. reaction \\(R_j\\) characterized mathematically two quantities; state-change vector \\(\\bm{\\nu_j}\\) propensity function \\(a_j(\\mathbf{x})\\). state-change vector defined \\(\\bm{\\nu}_j \\equiv ( \\nu_{1j},\\ldots,\\nu_{Nj} )\\), \\( \\nu_{ij} \\) change number individuals population \\(\\) caused one reaction type \\(j\\). propensity function defined \\(a_j(\\mathbf{x})\\), \\(a_j(\\mathbf{x})dt\\) probability particular reaction \\(j\\) occur next infinitesimal time interval \\(\\left[t,t+dt\\right]\\).","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/GillespieSSA2.html","id":"contents-of-this-package","dir":"Reference","previous_headings":"","what":"Contents of this package","title":"GillespieSSA2: Gillespie's Stochastic Simulation Algorithm for impatient people. — GillespieSSA2","text":"ssa(): main entry point running SSA simulation. plot_ssa(): standard visualisation generating overview plot fo output. ssa_exact(), ssa_etl(), ssa_btl(): Different SSA algorithms. ode_em(): ODE algorithm. compile_reactions(): function precompiling reactions.","code":""},{"path":[]},{"path":"https://rcannood.github.io/GillespieSSA2/reference/compile_reactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Precompile the reactions — compile_reactions","title":"Precompile the reactions — compile_reactions","text":"precompiling reactions, can run multiple SSA simulations repeatedly without recompile reactions every time.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/compile_reactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precompile the reactions — compile_reactions","text":"","code":"compile_reactions(   reactions,   state_ids,   params,   buffer_ids = NULL,   hardcode_params = FALSE,   fun_by = 10000L,   debug = FALSE )"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/compile_reactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precompile the reactions — compile_reactions","text":"reactions 'reaction' list multiple reaction() objects. state_ids [character] names states correct order. params [named numeric] Constants used propensity functions. buffer_ids [character] order buffer calculations made part propensity functions. hardcode_params [logical] Whether hardcode values params compilation propensity functions. Setting TRUE result minor sacrifice accuracy minor increase performance. fun_by [integer] Combine number propensity functions one function. debug [logical] Whether print resulting C++ code compiling.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/compile_reactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precompile the reactions — compile_reactions","text":"list objects solely used ssa(). x[[\"state_change\"]]: sparse matrix reaction effects. x[[\"reaction_ids\"]]: names reactions. x[[\"buffer_ids\"]]: set buffer variables found propensity functions. x[[\"buffer_size\"]]: minimum size buffer required. x[[\"function_pointers\"]]: list compiled propensity functions. x[[\"hardcode_params\"]]: Whether parameters hard coded source code.`","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/compile_reactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precompile the reactions — compile_reactions","text":"","code":"# \\donttest{ initial_state <- c(prey = 1000, predators = 1000) params <- c(c1 = 10, c2 = 0.01, c3 = 10) reactions <- list(   #        propensity function     effects                       name for reaction   reaction(~c1 * prey,             c(prey = +1),                 \"prey_up\"),   reaction(~c2 * prey * predators, c(prey = -1, predators = +1), \"predation\"),   reaction(~c3 * predators,        c(predators = -1),            \"pred_down\") )  compiled_reactions <- compile_reactions(   reactions = reactions,   state_ids = names(initial_state),   params = params )  out <-   ssa(     initial_state = initial_state,     reactions = compiled_reactions,     params = params,     method = ssa_exact(),     final_time = 5,     census_interval = .001,     verbose = TRUE   ) #> Running SSA exact with console output every 1 seconds #> walltime: 0, sim_time: 0 #> SSA finished!  plot_ssa(out) #> Loading required namespace: ggplot2  # }"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ode_em.html","id":null,"dir":"Reference","previous_headings":"","what":"Euler-Maruyama method (EM) — ode_em","title":"Euler-Maruyama method (EM) — ode_em","text":"Euler-Maruyama method implementation ODE.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ode_em.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Euler-Maruyama method (EM) — ode_em","text":"","code":"ode_em(tau = 0.01, noise_strength = 2)"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ode_em.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Euler-Maruyama method (EM) — ode_em","text":"tau tau parameter noise_strength noise_strength parameter","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ode_em.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Euler-Maruyama method (EM) — ode_em","text":"object used ssa().","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/plot_ssa.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple plotting of ssa output — plot_ssa","title":"Simple plotting of ssa output — plot_ssa","text":"Provides basic functionally simple quick time series plot simulation output ssa().","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/plot_ssa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple plotting of ssa output — plot_ssa","text":"","code":"plot_ssa(   ssa_out,   state = TRUE,   propensity = FALSE,   buffer = FALSE,   firings = FALSE,   geom = c(\"point\", \"step\") )"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/plot_ssa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple plotting of ssa output — plot_ssa","text":"ssa_out Data object returned ssa(). state Whether plot state values. propensity Whether plot propensity values. buffer Whether plot buffer values. firings Whether plot reaction firings values. geom geom use, must one \"point\", \"step\".","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/port_reactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Port GillespieSSA parameters to GillespieSSA2 — port_reactions","title":"Port GillespieSSA parameters to GillespieSSA2 — port_reactions","text":"helper function tranform GillesieSSA-style paramters GillespieSSA2.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/port_reactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Port GillespieSSA parameters to GillespieSSA2 — port_reactions","text":"","code":"port_reactions(x0, a, nu)"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/port_reactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Port GillespieSSA parameters to GillespieSSA2 — port_reactions","text":"x0 x0 parameter GillespieSSA::ssa(). parameter GillespieSSA::ssa(). nu nu parameter GillespieSSA::ssa().","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/port_reactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Port GillespieSSA parameters to GillespieSSA2 — port_reactions","text":"set reaction()s used ssa().","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/port_reactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Port GillespieSSA parameters to GillespieSSA2 — port_reactions","text":"","code":"x0  <- c(Y1 = 1000, Y2 = 1000) a   <- c(\"c1*Y1\",\"c2*Y1*Y2\",\"c3*Y2\") nu  <- matrix(c(+1,-1,0,0,+1,-1),nrow=2,byrow=TRUE) port_reactions(x0, a, nu) #> [[1]] #> Reaction:  #>  - Propensity: c1*Y1 #>  - Effects: Y1: +1 #>  #> [[2]] #> Reaction:  #>  - Propensity: c2*Y1*Y2 #>  - Effects: Y1: -1, Y2: +1 #>  #> [[3]] #> Reaction:  #>  - Propensity: c3*Y2 #>  - Effects: Y2: -1 #>"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/print_ssa.html","id":null,"dir":"Reference","previous_headings":"","what":"Print various SSA objects — print.SSA_reaction","title":"Print various SSA objects — print.SSA_reaction","text":"Print various SSA objects","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/print_ssa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print various SSA objects — print.SSA_reaction","text":"","code":"# S3 method for SSA_reaction print(x, ...)  # S3 method for SSA_method print(x, ...)"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/print_ssa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print various SSA objects — print.SSA_reaction","text":"x SSA reaction SSA method ... used","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/reaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a reaction — reaction","title":"Define a reaction — reaction","text":"SSA simulation, infinitesimal time interval, reaction occur probability defined according propensity. , change state vector according effects.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/reaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a reaction — reaction","text":"","code":"reaction(propensity, effect, name = NA_character_)"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/reaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a reaction — reaction","text":"propensity [character/formula] character formula representation propensity function, written C++. effect [named integer vector] change state caused reaction. name [character] name reaction (Optional). May contain characters matching [-Za-z0-9_].","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/reaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a reaction — reaction","text":"[SSA_reaction] object describes single reaction part SSA simulation. contains following member values: r[[\"propensity\"]]: propensity function character. r[[\"effect\"]]: change state caused reaction. r[[\"name\"]]: name reaction, NA_character_ name provided.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/reaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a reaction — reaction","text":"possible use 'buffer' values order speed computation propensity functions. instance, instead \"(c3 * s1) / (1 + c3 * c1)\", possible write \"buf = c3 * s1; buf / (buf + 1)\" instead.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/reaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a reaction — reaction","text":"","code":"#        propensity                        effect reaction(~ c1 * s1,                          c(s1 = -1)) #> Reaction:  #>  - Propensity: c1 * s1 #>  - Effects: s1: -1 reaction(\"c2 * s1 * s1\",                     c(s1 = -2, s2 = +1)) #> Reaction:  #>  - Propensity: c2 * s1 * s1 #>  - Effects: s1: -2, s2: +1 reaction(\"buf = c3 * s1; buf / (buf + 1)\",   c(s1 = +2)) #> Reaction:  #>  - Propensity: buf = c3 * s1; buf / (buf + 1) #>  - Effects: s1: +2"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa.html","id":null,"dir":"Reference","previous_headings":"","what":"Invoking the stochastic simulation algorithm — ssa","title":"Invoking the stochastic simulation algorithm — ssa","text":"Main interface function implemented SSA methods. Runs single realization predefined system. detailed explanation set first SSA system, check introduction vignette: vignette(\"an_introduction\", package = \"GillespieSSA2\"). transitioning GillespieSSA GillespieSSA2, check corresponding vignette: vignette(\"converting_from_GillespieSSA\", package = \"GillespieSSA2\").","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invoking the stochastic simulation algorithm — ssa","text":"","code":"ssa(   initial_state,   reactions,   final_time,   params = NULL,   method = ssa_exact(),   census_interval = 0,   stop_on_neg_state = TRUE,   max_walltime = Inf,   log_propensity = FALSE,   log_firings = FALSE,   log_buffer = FALSE,   verbose = FALSE,   console_interval = 1,   sim_name = NA_character_,   return_simulator = FALSE )"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invoking the stochastic simulation algorithm — ssa","text":"initial_state [named numeric vector] initial state start simulation . reactions list reactions, see reaction(). final_time [numeric] final simulation time. params [named numeric vector] Constant parameters used propensity functions. method [ssa_method]] SSA algorithm use. Must one : ssa_exact(), ssa_btl(), ssa_etl(). census_interval [numeric] approximate interval recording state system. Setting parameter 0 cause state recorded, Inf cause end state recorded. stop_on_neg_state [logical] Whether stop simulation negative value state occured. can occur, instance, ssa_etl() method. max_walltime [numeric] maximum duration (seconds) simulation allowed run terminated. log_propensity [logical] Whether store propensity values census. log_firings [logical] Whether store number firings reaction censuses. log_buffer [logical] Whether store buffer census. verbose [logical] TRUE, intermediary information pertaining simulation displayed. console_interval [numeric] approximate interval intermediary information outputs. sim_name [character] optional name simulation. return_simulator Whether return simulator , instead output.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invoking the stochastic simulation algorithm — ssa","text":"Returns list containing output simulation: [[\"time\"]]: [numeric] simulation time census performed. [[\"state\"]]: [numeric matrix] number individuals time points. [[\"propensity\"]]: [numeric matrix] log_propensity TRUE, propensity value reaction time point. [[\"firings\"]]: [numeric matrix] log_firings TRUE, number firings two time points. [[\"buffer\"]]: [numeric matrix] log_buffer TRUE, buffer values time point. [[\"stats\"]]: [data frame] Various stats: $method: name SSA method used. $sim_name: name simulation, provided. $sim_time_exceeded: Whether simulation stopped final simulation time reached. $all_zero_state: Whether extinction occurred. $negative_state: Whether negative state occurred. SSA method ssa_etl() used, indicates mistake provided reaction effects. $all_zero_propensity: Whether simulation stopped propensity values zero. $negative_propensity: Whether negative propensity value occurred. , likely mistake provided reaction propensity functions. $walltime_exceeded: Whether simulation stopped maximum execution time reached. $walltime_elapsed: duration simulation. $num_steps: number steps performed. $dtime_mean: mean time increment per step. $dtime_sd: standard deviation time increments. $firings_mean: mean number firings per step. $firings_sd: standard deviation number firings.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Invoking the stochastic simulation algorithm — ssa","text":"Substantial improvements speed accuracy can obtained adjusting additional (optional) ssa arguments. default ssa uses conservative parameters (o.. ssa_exact()) prioritise computational accuracy computational speed. Approximate methods (ssa_etl() ssa_btl()) fool proof! tweaking might required stochastic model run appropriately.","code":""},{"path":[]},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invoking the stochastic simulation algorithm — ssa","text":"","code":"# \\donttest{ initial_state <- c(prey = 1000, predators = 1000) params <- c(c1 = 10, c2 = 0.01, c3 = 10) reactions <- list(   #        propensity function     effects                       name for reaction   reaction(~c1 * prey,             c(prey = +1),                 \"prey_up\"),   reaction(~c2 * prey * predators, c(prey = -1, predators = +1), \"predation\"),   reaction(~c3 * predators,        c(predators = -1),            \"pred_down\") )  out <-   ssa(     initial_state = initial_state,     reactions = reactions,     params = params,     method = ssa_exact(),     final_time = 5,     census_interval = .001,     verbose = TRUE   ) #> Running SSA exact with console output every 1 seconds #> walltime: 0, sim_time: 0 #> SSA finished!  plot_ssa(out)  # }"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_btl.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial tau-leap method (BTL) — ssa_btl","title":"Binomial tau-leap method (BTL) — ssa_btl","text":"Binomial tau-leap method implementation SSA described Chatterjee et al. (2005).","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_btl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binomial tau-leap method (BTL) — ssa_btl","text":"","code":"ssa_btl(mean_firings = 10)"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_btl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binomial tau-leap method (BTL) — ssa_btl","text":"mean_firings coarse-graining factor many firings occur iteration average. Depending propensity functions, value mean_firings result warnings generated loss accuracy.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_btl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binomial tau-leap method (BTL) — ssa_btl","text":"object used ssa().","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_btl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Binomial tau-leap method (BTL) — ssa_btl","text":"Chatterjee ., Vlachos D.G., Katsoulakis M.. 2005. Binomial distribution based tau-leap accelerated stochastic simulation. J. Chem. Phys. 122:024112. doi:10.1063/1.1833357 .","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_etl.html","id":null,"dir":"Reference","previous_headings":"","what":"Explicit tau-leap method (ETL) — ssa_etl","title":"Explicit tau-leap method (ETL) — ssa_etl","text":"Explicit tau-leap method implementation SSA described Gillespie (2001). Note method attempt select appropriate value tau, implement estimated-midpoint technique.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_etl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explicit tau-leap method (ETL) — ssa_etl","text":"","code":"ssa_etl(tau = 0.3)"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_etl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explicit tau-leap method (ETL) — ssa_etl","text":"tau step-size (default 0.3).","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_etl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explicit tau-leap method (ETL) — ssa_etl","text":"object used ssa().","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_etl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Explicit tau-leap method (ETL) — ssa_etl","text":"Gillespie D.T. 2001. Approximate accelerated stochastic simulation chemically reacting systems. J. Chem. Phys. 115:1716-1733. doi:10.1063/1.1378322 .","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_exact.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact method — ssa_exact","title":"Exact method — ssa_exact","text":"Exact method implementation SSA described Gillespie (1977).","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_exact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact method — ssa_exact","text":"","code":"ssa_exact()"},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_exact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact method — ssa_exact","text":"object used ssa().","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/reference/ssa_exact.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Exact method — ssa_exact","text":"Gillespie D.T. 1977. Exact stochastic simulation coupled chemical reactions. J. Phys. Chem. 81:2340. doi:10.1021/j100540a008","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-030","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.3.0","title":"GillespieSSA2 0.3.0","text":"MINOR CHANGE: Add debug parameter print propensity functions compiling. MINOR CHANGE: Add spaces terms reaction propensity C++ code avoid pasting together important key words (e.g. else).","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-0210","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.10","title":"GillespieSSA2 0.2.10","text":"CRAN release: 2022-09-23 MINOR CHANGE: Turn array propensity functions vector propensity functions.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-029","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.9","title":"GillespieSSA2 0.2.9","text":"MINOR CHANGE: Update RcppExports.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-028","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.8","title":"GillespieSSA2 0.2.8","text":"CRAN release: 2021-05-18 BUG FIX: RNG now uses RNGScope properly get put RNG state calling RNG functions (fixes #8, thanks @bbolker!). DOCUMENTATION: Added example compile_reactions().","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-027-14-07-2020","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.7 (14-07-2020)","title":"GillespieSSA2 0.2.7 (14-07-2020)","text":"CRAN release: 2020-07-14 BUG FIX: Renamed autoplot.ssa() plot_ssa() compatibility R 4.0.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-026-14-03-2020","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.6 (14-03-2020)","title":"GillespieSSA2 0.2.6 (14-03-2020)","text":"BUG FIX: Zap small negative propensity state values. FEATURE autoplot.ssa(): Allow plotting firings. DEBUG FEATURE ssa(): Allow returning GillespieSSA2 instead running .","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-025-21-08-2019","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.5 (21-08-2019)","title":"GillespieSSA2 0.2.5 (21-08-2019)","text":"CRAN release: 2019-08-22 BUG FIX: Use fabs() instead abs() calculate absolute value floating point value. BUG FIX: Precompiling returns list compiled function pointers, instead single function pointer secretly array function pointers.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-024-05-08-2019","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.4 (05-08-2019)","title":"GillespieSSA2 0.2.4 (05-08-2019)","text":"CRAN release: 2019-08-05 GillespieSSA2 now CRAN! MAJOR CHANGE: Split Rcpp code make separate parts easier test. TESTING: Write unit tests many functions. MINOR CHANGE: Renamed ssa_direct() ssa_exact(). MINOR CHANGE: Store firings, buffer propensity objects requested. BUG FIX: limiting variable ssa_btl() integer, double. MINOR CHANGE: Timer now millisecond accuracy, instead second.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-023-17-07-2019","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.3 (17-07-2019)","title":"GillespieSSA2 0.2.3 (17-07-2019)","text":"MAJOR CHANGE: Remove nu propensity_functions ssa(), instead expect list reaction() objects. function provides much natural interface specifying effect propensity reaction. MINOR CHANGE: Apply small allocation optimisations ssa_btl, ssa_etl ode_em.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-022-12-07-2019","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.2 (12-07-2019)","title":"GillespieSSA2 0.2.2 (12-07-2019)","text":"MINOR CHANGE: Renamed ssa_em() ode_em().","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-021-04-07-2019","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.1 (04-07-2019)","title":"GillespieSSA2 0.2.1 (04-07-2019)","text":"BUG FIX: Fix isinf scope issue Windows users. MINOR CHANGE: Move ggplot2 Suggests.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-020-21-06-2019","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.2.0 (21-06-2019)","title":"GillespieSSA2 0.2.0 (21-06-2019)","text":"Complete rewrite package: main SSA function SSA methods implemented Rcpp. User-defined propensity functions get compiled Rcpp runtime. SSA methods now assume state-change matrix nu sparse.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-011-05-01-2018","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.1.1 (05-01-2018)","title":"GillespieSSA2 0.1.1 (05-01-2018)","text":"MINOR CHANGE: Added automated testing travis. MINOR CHANGE: Fixes documentation. MINOR CHANGE: Also output propensities.","code":""},{"path":"https://rcannood.github.io/GillespieSSA2/news/index.html","id":"gillespiessa2-010-31-08-2017","dir":"Changelog","previous_headings":"","what":"GillespieSSA2 0.1.0 (31-08-2017)","title":"GillespieSSA2 0.1.0 (31-08-2017)","text":"Initial beta release GillespieSSA2: Major restructuring GillespieSSA code. Optimise main algorithm code (e.g. save state variables directly global environment…). Implement SSA methods Rcpp. Added ode_em(), Euler-Marumaya ODE method.","code":""}]
