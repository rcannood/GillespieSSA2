% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ssa.R
\name{ssa}
\alias{ssa}
\title{Invoking the stochastic simulation algorithm}
\usage{
ssa(initial.state, propensity.funs, nu, final.time, parms = NULL,
  method = ssa.direct(), stop.on.negstate = TRUE,
  stop.on.propensity = TRUE, census.interval = 0, verbose = FALSE,
  max.duration = Inf, recalculate.all = F, extra.functions = list())
}
\arguments{
\item{initial.state}{numerical vector of initial states where the component elements
must be named using the same notation as the corresponding state variable in
the propensity vector, \code{a}.}

\item{propensity.funs}{character vector of propensity functions where state variables
correspond to the names of the elements in \code{initial.state}.}

\item{nu}{numerical matrix of change if the number of individuals in each
state (rows) caused by a single reaction of any given type (columns).}

\item{final.time}{final time.}

\item{parms}{named vector of model parameters.}

\item{method}{which method to use. Must be one of: \code{\link{ssa.direct}},
\code{\link{ssa.btl}}, \code{\link{ssa.etl}}, or \code{\link{ssa.otl}}}

\item{stop.on.negstate}{boolean object indicating if negative state
values should be ignored (this can occur in the \code{etl} method). If
\code{stop.on.negstate = TRUE} the simulation finishes gracefully when
encountering a negative population size (i.e. does not throw an error). If
\code{stop.on.negstate = FALSE} the simulation stops with an error message
when encountering a negative population size.}

\item{stop.on.propensity}{Whether or not to stop at a certain propensity}

\item{census.interval}{(approximate) interval between recording the state of
the system. If \code{census.interval = 0} \eqn{(t,x)} is recorded at each time
step (or tau-leap). If \code{census.interval = Inf} only
\eqn{(t_0,x_0)}{(t0,initial.state)} and \eqn{(t_f,x_t)}{(final.time,xf)} is recorded. Note, the
size of the time step (or tau-leaps) ultimately limits the interval between
subsequent recordings of the system state since the state of the system
cannot be recorded at a finer time interval the size of the time steps (or
tau-leaps).}

\item{verbose}{If \code{TRUE}, intermediary information pertaining to the simulation will be displayed at each step.
If \code{verbose} is a numeric, it will only be displayed about every \code{verbose} seconds.
\strong{Verbose runs drastically slows down simulations.}}

\item{max.duration}{maximum wall time duration (in seconds) that the
simulation is allowed to run for before terminated. This option is usefull,
in particular, for systems that can end up growing uncontrolably.}

\item{recalculate.all}{todo documentation}

\item{extra.functions}{Function in the form of `function(x, xprev)` to apply to each iteration.}
}
\value{
Returns a list object with the following elements,
  \item{timeseries}{a data frame of the simulation time series where the first column is the time vector and subsequent columns are the state frequencies.}
  \item{stats}{a data frame containing several simulation statistics statistics.}
  \item{args}{the original parameters passed to \code{\link{ssa}}}
}
\description{
Main interface function to the implemented \acronym{SSA} methods. Runs a
single realization of a predefined system.
}
\details{
Although \code{ssa} can be invoked by only specifying the system arguments
(initial state vector \code{initial.state}, propensity vector \code{propensity.funs}, state-change
matrix \code{nu}), the final time (\code{final.time}), and the \acronym{SSA} method
to use, substantial improvements in speed and accuracy can be obtained by
adjusting the additional (and optional) \code{ssa} arguments. By default
\code{ssa} (tries to) use conservative default values for the these
arguments, prioritizing computational accuracy over computational speed.
These default values are, however, \strong{not} fool proof for the
approximate methods, and occasionally one will have to hand tweak them in
order for a stochastic model to run appropriately.
}
\note{
Selecting the appropriate \acronym{SSA} method is a trade-off between
  computational speed, accuracy of the results, and which \acronym{SSA}
  actually works for a given scenario. This depends on the characteristics of
  the defined system (e.g. number of reaction channels, number of species, and
  the absolute and relative magnitude of the propensity functions).
  \strong{Not all methods are appropriate for all models.} When selecting a
  \acronym{SSA} method all of these factors have to be taken into
  consideration. The various tau-leap methods accept a number of additional
  arguments. While the default values of these arguments may work for some
  scenarios they may have to be adjusted for others. The default values for
  the tau-leap methods are conservative in terms of computational speed and
  substantial increase in efficiency may be gained by optimizing their values
  for a specific system.
}
\section{Preparing a run}{
 In order to invoke \acronym{SSA} the stochastic
  model needs at least four components, the initial state vector (\code{initial.state}),
  state-change matrix (\code{nu}), propensity vector (\code{a}), and the final
  time of the simulation (\code{final.time}). The initial state vector defines the
  population sizes in all the states at \eqn{t = 0}, e.g. for a system with two
  species \code{X1} and \code{X2} where both have an initial population size
  of 1000 the initial state vector is defined as \code{initial.state <-
  c(X1 = 1000,X2 = 1000)}. The elements of the vector have to be labelled using
  the same notation as the state variables used in the propensity functions.
  The state-change matrix defines the change in the number of individuals in
  each state (rows) as caused by one reaction of a given type (columns). For
  example, the state-change matrix for system with the species \eqn{S_1}{S1}
  and \eqn{S_2}{S2} with two reactions \deqn{S_1
  \stackrel{c_1}{\longrightarrow} S_2}{S1 --c1--> S2} \deqn{S_2
  \stackrel{c_2}{\longrightarrow} 0}{S2 --c2--> 0}

  is defined as \code{nu <- matrix(c(-1,0,+1,-1),nrow = 2,byrow = TRUE)} where
  \eqn{c_1}{c1} and \eqn{c_2}{c2} are the per capita reaction probabilities.
  The propensity vector, \code{a}, defines the probabilities that a particular
  reaction will occur over the next infinitesimal time interval \eqn{\left[
  t,t+dt \right]}{[t,t+dt]}. For example, in the previous example the
  propensity vector is defined as \code{a <- c("c1*X1","c2*X2")}. The
  propensity vector consists of character elements of each reaction's
  propensity function where each state variable requires the corresponding
  named element label in the initial state vector (\code{initial.state}).
}

\examples{

## Irreversible isomerization
## Large initial population size (X = 1000)
\dontrun{
parms <- c(c = 0.5)
initial.state  <- c(X = 10000)
a   <- c("c*X")
nu  <- matrix(-1)
# Direct method
out <- ssa(initial.state,a,nu,parms,final.time = 10,simName = "Irreversible isomerization")
plot(out$data[,1],out$data[,2]/10000,col = "red",cex = 0.5,pch = 19)
}

## Smaller initial population size (X = 100)
\dontrun{
initial.state  <- c(X = 100)
out <- ssa(initial.state,a,nu,parms,final.time = 10) # Direct method
points(out$data[,1],out$data[,2]/100,col = "green",cex = 0.5,pch = 19)
}

## Small initial population size (X = 10)
\dontrun{
initial.state  <- c(X = 10)
out <- ssa(initial.state,a,nu,parms,final.time = 10) # Direct method
points(out$data[,1],out$data[,2]/10,col = "blue",cex = 0.5,pch = 19)
}

## Logistic growth
\dontrun{
parms <- c(b = 2, d = 1, K = 1000)
initial.state  <- c(N = 500)
a   <- c("b*N", "(d+(b-d)*N/K)*N")
nu  <- matrix(c(+1,-1),ncol = 2)
out <- ssa(initial.state,a,nu,parms,final.time = 10,method = "D",
           max.duration = 5,simName = "Logistic growth")
ssa.plot(out)
}

## Kermack-McKendrick SIR model
\dontrun{
parms <- c(beta = 0.001, gamma = 0.1)
initial.state  <- c(S = 499,I = 1,R = 0)
a   <- c("beta*S*I","gamma*I")
nu  <- matrix(c(-1,0,+1,-1,0,+1),nrow = 3,byrow = TRUE)
out <- ssa(initial.state,a,nu,parms,final.time = 100,simName = "SIR model")
ssa.plot(out)
}

## Lotka predator-prey model
\dontrun{
parms <- c(c1 = 10, c2 = .01, c3 = 10)
initial.state  <- c(Y1 = 1000,Y2 = 1000)
a   <- c("c1*Y1","c2*Y1*Y2","c3*Y2")
nu  <- matrix(c(+1,-1,0,0,+1,-1),nrow = 2,byrow = TRUE)
out <- ssa(initial.state,a,nu,parms,final.time = 100,method = "ETL",
           simName = "Lotka predator-prey model")
ssa.plot(out)
}

}
\seealso{
\link{fastgssa-package}, \code{\link{ssa.direct}}, \code{\link{ssa.etl}}, \code{\link{ssa.btl}}, \code{\link{ssa.otl}}
}
\keyword{datagen}
\keyword{misc}
\keyword{ts}
